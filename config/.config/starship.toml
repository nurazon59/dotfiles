# Starship configuration

format = """
${custom.git_repo}\
${custom.non_git_dir}\
$git_branch\
$git_status\
$line_break\
$character"""

[custom.git_repo]
when = true
require_repo = true
command = '''
repo_path=$(git rev-parse --show-toplevel 2>/dev/null)
current_path=$(pwd)
relative_path=$(echo "$current_path" | sed "s|^$repo_path||" | sed 's|^/||')

# ghqで管理されているか確認
ghq_root=$(ghq root 2>/dev/null)
if [ -n "$ghq_root" ] && echo "$repo_path" | grep -q "^$ghq_root/github.com/"; then
  # ghq管理下のリポジトリ
  owner_repo=$(echo "$repo_path" | sed "s|$ghq_root/github.com/||")
else
  # ghq管理外のリポジトリ - リポジトリ名のみ表示
  owner_repo=$(basename "$repo_path")
fi

if [ -z "$relative_path" ]; then
  echo "$owner_repo"
else
  echo "$owner_repo $relative_path"
fi
'''
style = 'bold cyan'
format = '[$output]($style) '

[custom.non_git_dir]
when = '! git rev-parse --show-toplevel &>/dev/null'
command = 'pwd | sed "s|$HOME|~|"'
style = 'cyan'
format = '[$output]($style) '

[git_branch]
format = "[$symbol$branch]($style) "
style = "bold purple"

[git_status]
format = '([$all_status$ahead_behind]($style))'
style = ""
conflicted = "[~${count}](bold red) "
ahead = "[⇡${count}](bold green) "
behind = "[⇣${count}](bold red) "
diverged = "[⇕⇡${ahead_count}⇣${behind_count}](bold red) "
untracked = "[?${count}](blue) "
stashed = "[*${count}](cyan) "
modified = "[!${count}](yellow) "
staged = "[+${count}](green) "
renamed = "[»${count}](blue) "
deleted = "[✘${count}](red) "

[character]
success_symbol = "[❯](bold green)"
error_symbol = "[❯](bold red)"

[aws]
disabled = true
